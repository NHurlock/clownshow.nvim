*clownshow.nvim*

Live Jest test results and diagnostics directly in your buffer

==============================================================================
COMMANDS                                                  *clownshow-commands*

Run Jest watch on the current buffer.
Test results will update on save or when dependent files are updated.
>
  :JestWatch
<

Stop Jest watch on the current buffer.
This will happen automatically on a `BufDelete` event.
>
  :JestWatchStop
<

==============================================================================
FUNCTIONS                                                *clownshow-functions*

                                                             *clownshow.setup*
clownshow.setup({opts}) ~

Configures clownshow with the provided {opts}. Configuration overrides the
default configuration. see |clownshow-default-configuration|

    Parameters: ~
      - {opts}:   see |clownshow-configuration|

                                                       *clownshow.set_options*
clownshow.set_options({opts}) ~

Updates the clownshow configuration with the provided {opts}. Configuration
overrides the configuration provided in |clownshow.setup|

    Parameters: ~
      - {opts}:   see |clownshow-configuration|


==============================================================================
CONFIGURATION                                        *clownshow-configuration*

- `mode`:         <string> mark display mode, either 'inline' or 'above'
                    - 'inline' places marks in virtual text inline with test definition
                    - 'above' places marks in a virtual line above test definition
- `jest_command`: <function> - fun(opts):string - custom function returning a string to run as
                    the jest command
                    see |clownshow-jest-command|
- `project_root`: <function> - fun(opts):string - custom function returning a string to use as
                    project root for the jest command
                    see |clownshow-project-root|
- `show_icon`:    <boolean> show or hide the 'icon' for marks
- `show_text`:    <boolean> show or hide the 'text' for marks
- `passed`:       <table> configuration for 'passed' test marks
                    see |clownshow-mark-configuration|
- `failed`:       <table> configuration for 'failed' test marks
                    see |clownshow-mark-configuration|
- `skipped`:      <table> configuration for 'skipped' test marks
                    see |clownshow-mark-configuration|
- `loading`:      <table> configuration for 'loading' test marks
                    see |clownshow-mark-configuration|

                                                *clownshow-mark-configuration*
- `icon`:         <string> display an icon
- `text`:         <string> display text
- `hl_group`:     <string> highlight group

                                             *clownshow-default-configuration*
>lua
  {
    mode = "inline",
    show_icon = true,
    show_text = false,
    jest_command = function(opts)
      local cmd_path = vim.fn.findfile("node_modules/.bin/jest", vim.fn.fnamemodify(opts.path, ":p:h") .. ";")
      return vim.fn.fnamemodify(cmd_path, ':p')
    end,
    project_root = function()
      return vim.fn.fnamemodify(".", ":p")
    end,
    passed = {
      icon = "✓",
      text = "Passed",
      hl_group = "LspDiagnosticsInformation"
    },
    failed = {
      icon = "✗",
      text = "Failed",
      hl_group = "LspDiagnosticsError"
    },
    skipped = {
      icon = "⭘",
      text = "Skipped",
      hl_group = "LspDiagnosticsWarning"
    },
    loading = {
      icon = "●",
      text = "Loading...",
      hl_group = "LspDiagnosticsWarning"
    }
  }
<

                                                      *clownshow-jest-command*
By default, the jest command will attempt to find the first match for a
`node_modules/.bin/jest` file off of the current test file's path.

The following arguments are supplied to the `jest` cli and cannot be
overridden:
  `--watch`: to run in watch mode
  `--silent`: to suppress any unwanted extra output
  `--forceExit`: to force exit once complete
  `--json`: used to parse result output for display
  `--testLocationInResults`: used to apply result output to a specific location
  `--no-colors`: avoid non-standard text
  `--coverage=false`: forces coverage off even if it was set on in the jest
        command, as it is not reported on in the buffer at the moment

You may override the default `jest` command by supplying a `jest_command`
option, which should be a <function> that returns a <string>.

The <function> receives a single argument, {opts} which contains the following
properties:
  `bufnr`: the buffer number for the test file
  `path`: the full test file path
  `root`: the `project_root` value, see |clownshow-project-root|

The returned command must support supplying the above listed arguments
directly to the `jest` cli. (ie. `npm run test --`).

Example usage for `jest_command`:
>lua
 {
   ...other options,
   jest_command: function(opts)
     -- do something with `opts` here
     return "npm run test --"
   end
 }
<

                                                      *clownshow-project-root*
By default, the project root will be the current working directory.

You may override the default root by supplying a `project_root` option, which
should be a <function> that returns a <string>.

The <function> receives a single argument, {opts} which contains the following
properties:
  `bufnr`: the buffer number for the test file
  `path`: the full test file path

Example usage for `project_root`:
>lua
 {
   ...other options,
   project_root: function(opts)
     -- do something with `opts` here
     return "/my/custom/root"
   end
 }
<

vim:tw=78:ts=8:expandtab:ft=help:norl:
